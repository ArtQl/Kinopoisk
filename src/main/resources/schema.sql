CREATE TABLE IF NOT EXISTS users
(
    id       INT generated by default as identity primary key,
    email    VARCHAR NOT NUll,
    login    VARCHAR NOT NUll,
    username VARCHAR          DEFAULT 'noname',
    birthday DATE    NOT NULL DEFAULT CURRENT_DATE
);

CREATE TYPE IF NOT EXISTS status_type AS ENUM (
    'PENDING',
    'ACCEPTED',
    'REJECTED'
    );

CREATE TABLE IF NOT EXISTS friends
(
    user_id   INT REFERENCES users (id) ON DELETE CASCADE,
    friend_id INT REFERENCES users (id) ON DELETE CASCADE,
    status    status_type NOT NULL ,
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS films
(
    id           INT generated by default as identity primary key,
    name         VARCHAR NOT NUll,
    description  VARCHAR    NOT NULL DEFAULT 'no description',
    release_date DATE    NOT NULL DEFAULT CURRENT_DATE,
    duration     LONG             DEFAULT 0
);

CREATE TABLE IF NOT EXISTS likes
(
    film_id INT REFERENCES films (id) ON DELETE CASCADE,
    user_id INT REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, film_id)
);

CREATE TYPE IF NOT EXISTS genre_type AS ENUM (
    'COMEDY',
    'DRAMA',
    'CARTOON',
    'THRILLER',
    'DOCUMENTARY',
    'ACTION'
    );

CREATE TABLE IF NOT EXISTS genre
(
    id    INT generated by default as identity primary key,
    title genre_type UNIQUE
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id  INT REFERENCES films (id) ON DELETE CASCADE,
    genre_id INT REFERENCES genre (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);


CREATE TYPE IF NOT EXISTS mpa_type AS ENUM (
    'G',
    'PG',
    'PG_13',
    'R',
    'NC_17'
    );

CREATE TABLE IF NOT EXISTS mpa
(
    id    INT generated by default as identity primary key,
    title mpa_type UNIQUE
);

CREATE TABLE IF NOT EXISTS film_mpa
(
    film_id INT REFERENCES films (id) ON DELETE CASCADE,
    mpa_id  INT REFERENCES mpa (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, mpa_id)
);

CREATE TABLE IF NOT EXISTS director
(
    id    INT generated by default as identity primary key,
    title VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS film_director
(
    film_id     INT REFERENCES films (id) ON DELETE CASCADE,
    director_id INT REFERENCES director (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS review
(
    review_id     INT generated by default as identity primary key,
    film_id       INT REFERENCES films (id) ON DELETE CASCADE,
    user_id       INT REFERENCES users (id) ON DELETE CASCADE,
    content       VARCHAR,
    is_positive   BOOLEAN DEFAULT false,
    useful        INT     DEFAULT 0,
    users_like    JSON,
    users_dislike JSON
);

CREATE TYPE IF NOT EXISTS event_type AS ENUM (
    'LIKE',
    'REVIEW',
    'FRIEND'
    );

CREATE TYPE IF NOT EXISTS operation_type AS ENUM (
    'REMOVE',
    'ADD',
    'UPDATE'
    );

CREATE TABLE IF NOT EXISTS event (
    event_id INT generated by default as identity primary key,
    time_stamp TIMESTAMP default CURRENT_TIMESTAMP(),
    user_id INT REFERENCES users (id) ON DELETE CASCADE,
    event event_type NOT NULL,
    operation operation_type NOT NULL,
    entity_id INT NOT NULL
)


-- CREATE INDEX idx_friends_user ON friends (user_id);
-- CREATE INDEX idx_friends_friend ON friends (friend_id);
-- CREATE INDEX idx_likes_film ON likes (film_id);
-- CREATE INDEX idx_likes_user ON likes (user_id);
-- CREATE INDEX idx_film_genre_film ON film_genre (film_id);
-- CREATE INDEX idx_film_genre_genre ON film_genre (genre_id);
-- CREATE INDEX idx_film_mpa_film_id ON film_mpa (film_id);
-- CREATE INDEX idx_film_mpa_mpa ON film_mpa (mpa_id);